---
layout: post
title: "Generate PE file with OWASP ZSC Shellcodes"
date: 2015-08-01 15:10:18 +0430
comments: true
categories: trick
---
As We know, Shellcodes have much different usages, such as Exploit and Malwares development process, and etc. But there is a question, Could we compile the Shellcodes [Assembly Codes] and run them without inject inside an other process or file? Of course! Shellcodes are bunch of assembly codes with removed null codes or make it injectable in to a process.<br><br>
<strong>OWASP ZSC</strong> let us to have disassembly codes inside generated file. It could be used for compiling a sing file.
Take a look at a shellcode which generated by <strong>OWASP ZSC</strong>.
<br><br>
<!-- HTML generated using hilite.me --><div style="background: #202020; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #cd2828; font-weight: bold">#include &lt;stdio.h&gt;</span>
<span style="color: #cd2828; font-weight: bold">#include &lt;string.h&gt;</span>
<span style="color: #999999; font-style: italic">/*</span>
<span style="color: #999999; font-style: italic">This shellcode generated by ZCR Shellcoder [zsc] http://zsc.z3r0d4y.com/</span>
<span style="color: #999999; font-style: italic">Title: system(&#39;nc[space]-v[space]google.com[space]80&#39;)</span>
<span style="color: #999999; font-style: italic">OS: linux_x86</span>
<span style="color: #999999; font-style: italic">Encode: none</span>
<span style="color: #999999; font-style: italic">Length: 74</span>

<span style="color: #999999; font-style: italic">shellcode.c:     file format elf32-i386</span>

<span style="color: #999999; font-style: italic">Disassembly of section .text:</span>
<span style="color: #999999; font-style: italic">00000000 &lt;.text&gt;:</span>
<span style="color: #999999; font-style: italic">   0:	6a 0b                	push   $0xb</span>
<span style="color: #999999; font-style: italic">   2:	58                   	pop    %eax</span>
<span style="color: #999999; font-style: italic">   3:	99                   	cltd   </span>
<span style="color: #999999; font-style: italic">   4:	52                   	push   %edx</span>
<span style="color: #999999; font-style: italic">   5:	68 90 20 38 30       	push   $0x30382090</span>
<span style="color: #999999; font-style: italic">   a:	59                   	pop    %ecx</span>
<span style="color: #999999; font-style: italic">   b:	c1 e9 08             	shr    $0x8,%ecx</span>
<span style="color: #999999; font-style: italic">   e:	51                   	push   %ecx</span>
<span style="color: #999999; font-style: italic">   f:	68 2e 63 6f 6d       	push   $0x6d6f632e</span>
<span style="color: #999999; font-style: italic">  14:	68 6f 67 6c 65       	push   $0x656c676f</span>
<span style="color: #999999; font-style: italic">  19:	68 76 20 67 6f       	push   $0x6f672076</span>
<span style="color: #999999; font-style: italic">  1e:	68 6e 63 20 2d       	push   $0x2d20636e</span>
<span style="color: #999999; font-style: italic">  23:	89 e6                	mov    %esp,%esi</span>
<span style="color: #999999; font-style: italic">  25:	52                   	push   %edx</span>
<span style="color: #999999; font-style: italic">  26:	68 90 90 2d 63       	push   $0x632d9090</span>
<span style="color: #999999; font-style: italic">  2b:	59                   	pop    %ecx</span>
<span style="color: #999999; font-style: italic">  2c:	c1 e9 10             	shr    $0x10,%ecx</span>
<span style="color: #999999; font-style: italic">  2f:	51                   	push   %ecx</span>
<span style="color: #999999; font-style: italic">  30:	89 e1                	mov    %esp,%ecx</span>
<span style="color: #999999; font-style: italic">  32:	52                   	push   %edx</span>
<span style="color: #999999; font-style: italic">  33:	6a 68                	push   $0x68</span>
<span style="color: #999999; font-style: italic">  35:	68 2f 62 61 73       	push   $0x7361622f</span>
<span style="color: #999999; font-style: italic">  3a:	68 2f 62 69 6e       	push   $0x6e69622f</span>
<span style="color: #999999; font-style: italic">  3f:	89 e3                	mov    %esp,%ebx</span>
<span style="color: #999999; font-style: italic">  41:	52                   	push   %edx</span>
<span style="color: #999999; font-style: italic">  42:	57                   	push   %edi</span>
<span style="color: #999999; font-style: italic">  43:	56                   	push   %esi</span>
<span style="color: #999999; font-style: italic">  44:	51                   	push   %ecx</span>
<span style="color: #999999; font-style: italic">  45:	53                   	push   %ebx</span>
<span style="color: #999999; font-style: italic">  46:	89 e1                	mov    %esp,%ecx</span>
<span style="color: #999999; font-style: italic">  48:	cd 80                	int    $0x80</span>



<span style="color: #999999; font-style: italic">compile example: gcc -ggdb -static -fno-stack-protector -z execstack -mpreferred-stack-boundary=2 -o shellcode_compiled shellcode.c</span>
<span style="color: #999999; font-style: italic">*/</span>
 
<span style="color: #6ab825; font-weight: bold">int</span> <span style="color: #447fcf">main</span><span style="color: #d0d0d0">(){</span>
<span style="color: #6ab825; font-weight: bold">unsigned</span> <span style="color: #6ab825; font-weight: bold">char</span> <span style="color: #d0d0d0">shellcode[]=</span> <span style="color: #ed9d13">&quot;\x6a\x0b\x58\x99\x52\x68\x90\x20\x38\x30\x59\xc1\xe9\x08\x51\x68\x2e\x63\x6f\x6d\x68\x6f\x67\x6c\x65\x68\x76\x20\x67\x6f\x68\x6e\x63\x20\x2d\x89\xe6\x52\x68\x90\x90\x2d\x63\x59\xc1\xe9\x10\x51\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x57\x56\x51\x53\x89\xe1\xcd\x80&quot;</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">fprintf(stdout,</span><span style="color: #ed9d13">&quot;Length: %d\n\n&quot;</span><span style="color: #d0d0d0">,strlen(shellcode));</span>
    <span style="color: #d0d0d0">(*(</span><span style="color: #6ab825; font-weight: bold">void</span><span style="color: #d0d0d0">(*)())</span> <span style="color: #d0d0d0">shellcode)();</span>
<span style="color: #d0d0d0">}</span>
</pre></td></tr></table></div>
Our shellcode built for <strong>linux_x86</strong> OS that will execute "<strong>nc -v google.com 80</strong>" command, And as we can see, we have disassembled code in the comment of C file.<br><br>
```asm
Disassembly of section .text:
00000000 <.text>:
   0:    6a 0b                   push   $0xb
   2:    58                      pop    %eax
   3:    99                      cltd   
   4:    52                      push   %edx
   5:    68 90 20 38 30          push   $0x30382090
   a:    59                      pop    %ecx
   b:    c1 e9 08                shr    $0x8,%ecx
   e:    51                      push   %ecx
   f:    68 2e 63 6f 6d          push   $0x6d6f632e
  14:    68 6f 67 6c 65          push   $0x656c676f
  19:    68 76 20 67 6f          push   $0x6f672076
  1e:    68 6e 63 20 2d          push   $0x2d20636e
  23:    89 e6                   mov    %esp,%esi
  25:    52                      push   %edx
  26:    68 90 90 2d 63          push   $0x632d9090
  2b:    59                      pop    %ecx
  2c:    c1 e9 10                shr    $0x10,%ecx
  2f:    51                      push   %ecx
  30:    89 e1                   mov    %esp,%ecx
  32:    52                      push   %edx
  33:    6a 68                   push   $0x68
  35:    68 2f 62 61 73          push   $0x7361622f
  3a:    68 2f 62 69 6e          push   $0x6e69622f
  3f:    89 e3                   mov    %esp,%ebx
  41:    52                      push   %edx
  42:    57                      push   %edi
  43:    56                      push   %esi
  44:    51                      push   %ecx
  45:    53                      push   %ebx
  46:    89 e1                   mov    %esp,%ecx
  48:    cd 80                   int    $0x80
```
And now all we need is spliting the compiled assembly <strong>opcodes</strong>.
```asm
push   $0xb
pop    %eax
cltd
push   %edx
push   $0x30382090
pop    %ecx
shr    $0x8,%ecx
push   %ecx
push   $0x6d6f632e
push   $0x656c676f
push   $0x6f672076
push   $0x2d20636e
mov    %esp,%esi
push   %edx
push   $0x632d9090
pop    %ecx
shr    $0x10,%ecx
push   %ecx
mov    %esp,%ecx
push   %edx
push   $0x68
push   $0x7361622f
push   $0x6e69622f
mov    %esp,%ebx
push   %edx
push   %edi
push   %esi
push   %ecx
push   %ebx
mov    %esp,%ecx
int    $0x80
```
<br>We have to save these codes inside a file and compile it. Then we have the PE file.
```asm
root@airz:/# cat shellcode.asm
push   $0xb
pop    %eax
cltd
push   %edx
push   $0x30382090
pop    %ecx
shr    $0x8,%ecx
push   %ecx
push   $0x6d6f632e
push   $0x656c676f
push   $0x6f672076
push   $0x2d20636e
mov    %esp,%esi
push   %edx
push   $0x632d9090
pop    %ecx
shr    $0x10,%ecx
push   %ecx
mov    %esp,%ecx
push   %edx
push   $0x68
push   $0x7361622f
push   $0x6e69622f
mov    %esp,%ebx
push   %edx
push   %edi
push   %esi
push   %ecx
push   %ebx
mov    %esp,%ecx
int    $0x80

root@airz:/# as shellcode.asm -o shellcode.o
root@airz:/# ld shellcode.o -o shellcode
ld: warning: cannot find entry symbol _start; defaulting to 0000000008048054
root@airz:/# ./shellcode 
DNS fwd/rev mismatch: google.com != lga15s46-in-f7.1e100.net
DNS fwd/rev mismatch: google.com != lga15s46-in-f5.1e100.net
DNS fwd/rev mismatch: google.com != lga15s46-in-f8.1e100.net
DNS fwd/rev mismatch: google.com != lga15s46-in-f0.1e100.net
DNS fwd/rev mismatch: google.com != lga15s46-in-f9.1e100.net
DNS fwd/rev mismatch: google.com != lga15s46-in-f1.1e100.net
DNS fwd/rev mismatch: google.com != lga15s46-in-f4.1e100.net
DNS fwd/rev mismatch: google.com != lga15s46-in-f2.1e100.net
google.com [173.194.123.7] 80 (http) open
```
<br><h3>References</h3>
<a href="http://wwww.z3r0d4y.com">ZeroDay Cyber Research</a>
<br><a href="http://zsc.z3r0d4y.com">ZSC Home</a>
<br><a href="https://www.owasp.org/index.php/OWASP_ZSC_Tool_Project">OWASP Page</a>
<br><a href="mailto:Ali[at]Z3r0D4y.Com">Ali Razmjoo</a>
<br><br><br><br>

